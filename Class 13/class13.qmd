---
title: "Class13: RNAseq analysis with DESeq2"
author: "Brian Wells (PID: A69026838)"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone ("dex"), a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

```{r}
#| message: false
#| Warning: false
library(DESeq2)
```

## 

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```


>Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
```


I want to compare the control tot he treated columns. To do this I will:

- Step 1: Identify and extract the "control" columns
- Step 2: Calculate the mean value per gene for all these "control" columns and save as `control.mean`
- Step 3: Do the same for the treated (save as `treated.mean`)
- Step 4: Compare the `control.mean` and `treated.mean` claues

```{r}
control.inds <- metadata$dex == "control"
```

```{r}
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```



>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

The example code isn't great because its hardcoding the "4". Using what we used `rowMeans` avoids this problem



>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
```

```{r}
treated.mean <- rowMeans(counts[,treated.inds])
head(treated.mean)
```

Lets combine them into a dataframe
```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

lets see what these count values look like.

```{r}
plot(meancounts)
```
>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

point

```{r}
library(ggplot2)

ggplot(meancounts)+
  aes(control.mean, treated.mean) + 
  geom_point(alpha=0.2)
```




>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```
logs are super useful when we have such skewed data. 
```{r}
#treated / control
log2(10/10)

```
```{r}
log2(20/10)
```

Add log2(Fold-change) values to our wee results table.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
head(meancounts)
```
Need to exclude any genes with zero counts as we can't say anything about them anyway from this experiment and it cuases me math pain.

```{r}
#What values in the first two cols are zero
to.rm.inds <- rowSums(meancounts[,1:2] == 0) > 0
mycounts <- meancounts[!to.rm.inds,]
```


> Q. how many genes do I have left?

```{r}
nrow(mycounts)
```

> Q. How many genes are "up regulated" (ie have a log2(fc) greater that +2)?

```{r}
sum(mycounts$log2fc > +2)
```

>Q. How many are "down with a log2(fc) less than -2?

```{r}
sum(mycounts$log2fc < -2)
```


##Running DESeq

Like many bioconductor analysis packages, DESeq wants it's input in a very particular way

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design=~dex)
```

To run DESeq analysis we call the main function from the package called `DESeq(dds)`

```{r}
dds <- DESeq(dds)
```

To get the results out of `dds` object we can use the DESeq `results()` function.

```{r}
res <- results(dds)
head(res)
```

A common summary visualization is called a volcano plot

```{r}
plot(res$log2FoldChange, -log10(res$padj),
     xlab="log2 Fold-Change",
     ylab= "-log10 P-vlaues")
abline(v=c(-2,2), col="red")
abline(h=-log(0.05), col="blue")
```
```{r}
mycols <- rep("grey", nrow(res))
mycols[res$log2FoldChange > 2] <- "black"
mycols[res$log2FoldChange < -2] <- "black"
mycols[res$padj>0.05] <- "grey"
```

```{r}
plot(res$log2FoldChange, -log10(res$padj), col=mycols,
     xlab="log2 Fold-Change",
     ylab= "-log10 P-vlaues")
abline(v=c(-2,2), col="red")
abline(h=-log(0.05), col="blue")
```


# save our results

```{r}
write.csv(res, file="myresults.csv")
```


#Adding annotation data

We need to translate or "map" our ensemble IDs into more understandable gene names and the identifiers that other useful databases use.

```{r}
library(AnnotationDbi)
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```
>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```


```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```


```{r}
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)

