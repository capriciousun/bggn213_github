---
title: "Class06: R Functions"
author: "Brian Wells (A69026838)"
format: pdf
---

## All about functions in R

Everyfunction in R has at least 3 things:
- name(you pick it)
- arguments (the input(s) of your function),
- the body

Today we will write a function to grade a class of student assignment scores (e.g. homeworks, etc).

First I'll work with a simplified vector input where I know what the answer should be.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

>Q1: Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput”

```{r}
student1
```
use `mean()` to get the average for each student
```{r}
mean(student1)
```
to find vector of smallest score use `which.min()`
```{r}
which.min(student1)
```
to see what value the score is put `student#[#]`
```{r}
student1[8]
```
to get get the min value via the position vector
```{r}
student1[which.min(student1)]
```
to get everything *but* min value
```{r}
student1[-which.min(student1)]
```
to get the students average of everything but lowest score
```{r}
mean(student1[-which.min(student1)])
#this can be used in the function
```
now for student 2 with an NA
```{r}
student2
```
function removes NA. this is a bad idea.
```{r}
mean(student2, na.rm=T)
```
we need to make NA=0

```{r}
x <- student2
x

x[is.na(x)] <- 0
x
mean(x)
```
now to combine the parts that worked!
```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])

```

 *Function Time!!*

combine our snippets into a function

```{r}
grade <- function(x){
  x[is.na(x)] <- 0
  mean(x[-which.min(x)])
}
```

let's test our function

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Now let's apply this function to a full class.
```{r}
# now grade all students in an example class
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url,
                      row.names = 1)
```
here is the function from before with some code notes

```{r}
is.na(gradebook)
```


```{r}
grade <- function(x){
  ##assign NA to a value of 0 -- missing scores get a score of 0
  x[is.na(x)] <- 0
  ##average while dropping the lowest score
  mean(x[-which.min(x)])
}
```
now let's use `apply()` to grade the entire gradebook!
```{r}
apply(gradebook,1,grade)
```

>Q2 Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
#let's get our gradebook results
results <- apply(gradebook,1,grade)
#sort them from highest to lowest score
sort(results, decreasing=T)
#return the student with the highest value for their score
which.max(results)
```

>Q3 From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

First we want to get an average of the different columns (bc the columns are the different assignments)

lets interpret using average
```{r}
## use 2 to get columns
apply(gradebook,2,mean)
```
oops, gave us NA on any homeworks that have them
if we think that the NA should be counted as a 0 and the most 0s correlates to most difficult--
```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```

```{r}
which.min(apply(mask,2,mean))
```

if you think NA should be removed (not counted as a 0) because skipping doesn't necessarily mean "difficult" -- 
```{r}
hw.ave<- apply(gradebook,2,mean,na.rm=T)
which.min(hw.ave)
```


>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


lets get correlation for just one homework
```{r}
gradebook[is.na(gradebook)] <- 0
cor(results,gradebook$hw2)
```

Now lets get the correlation for all the homeworks
```{r}
hw.cor <- apply(gradebook,2,cor,x=results)
##now print the max cor value of all the homeworks
which.max(hw.cor)
```



>Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. 


